/**
 */
package san.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import san.util.SANAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SANItemProviderAdapterFactory extends SANAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SANItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.SAN} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SANItemProvider sanItemProvider;

	/**
	 * This creates an adapter for a {@link san.SAN}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSANAdapter() {
		if (sanItemProvider == null) {
			sanItemProvider = new SANItemProvider(this);
		}

		return sanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Place} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlaceItemProvider placeItemProvider;

	/**
	 * This creates an adapter for a {@link san.Place}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlaceAdapter() {
		if (placeItemProvider == null) {
			placeItemProvider = new PlaceItemProvider(this);
		}

		return placeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.InstantaneousActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstantaneousActivityItemProvider instantaneousActivityItemProvider;

	/**
	 * This creates an adapter for a {@link san.InstantaneousActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstantaneousActivityAdapter() {
		if (instantaneousActivityItemProvider == null) {
			instantaneousActivityItemProvider = new InstantaneousActivityItemProvider(this);
		}

		return instantaneousActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.TimedActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedActivityItemProvider timedActivityItemProvider;

	/**
	 * This creates an adapter for a {@link san.TimedActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedActivityAdapter() {
		if (timedActivityItemProvider == null) {
			timedActivityItemProvider = new TimedActivityItemProvider(this);
		}

		return timedActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Case} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CaseItemProvider caseItemProvider;

	/**
	 * This creates an adapter for a {@link san.Case}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCaseAdapter() {
		if (caseItemProvider == null) {
			caseItemProvider = new CaseItemProvider(this);
		}

		return caseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.InputArc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputArcItemProvider inputArcItemProvider;

	/**
	 * This creates an adapter for a {@link san.InputArc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputArcAdapter() {
		if (inputArcItemProvider == null) {
			inputArcItemProvider = new InputArcItemProvider(this);
		}

		return inputArcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.OutputArc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputArcItemProvider outputArcItemProvider;

	/**
	 * This creates an adapter for a {@link san.OutputArc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputArcAdapter() {
		if (outputArcItemProvider == null) {
			outputArcItemProvider = new OutputArcItemProvider(this);
		}

		return outputArcItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.OutputGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputGateItemProvider outputGateItemProvider;

	/**
	 * This creates an adapter for a {@link san.OutputGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputGateAdapter() {
		if (outputGateItemProvider == null) {
			outputGateItemProvider = new OutputGateItemProvider(this);
		}

		return outputGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.InputGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputGateItemProvider inputGateItemProvider;

	/**
	 * This creates an adapter for a {@link san.InputGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputGateAdapter() {
		if (inputGateItemProvider == null) {
			inputGateItemProvider = new InputGateItemProvider(this);
		}

		return inputGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link san.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.ExpressionText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionTextItemProvider expressionTextItemProvider;

	/**
	 * This creates an adapter for a {@link san.ExpressionText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionTextAdapter() {
		if (expressionTextItemProvider == null) {
			expressionTextItemProvider = new ExpressionTextItemProvider(this);
		}

		return expressionTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.ExpressionMarking} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionMarkingItemProvider expressionMarkingItemProvider;

	/**
	 * This creates an adapter for a {@link san.ExpressionMarking}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionMarkingAdapter() {
		if (expressionMarkingItemProvider == null) {
			expressionMarkingItemProvider = new ExpressionMarkingItemProvider(this);
		}

		return expressionMarkingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.ExpressionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionVariableItemProvider expressionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link san.ExpressionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionVariableAdapter() {
		if (expressionVariableItemProvider == null) {
			expressionVariableItemProvider = new ExpressionVariableItemProvider(this);
		}

		return expressionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.GlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GlobalVariableItemProvider globalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link san.GlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGlobalVariableAdapter() {
		if (globalVariableItemProvider == null) {
			globalVariableItemProvider = new GlobalVariableItemProvider(this);
		}

		return globalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Exponential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExponentialItemProvider exponentialItemProvider;

	/**
	 * This creates an adapter for a {@link san.Exponential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExponentialAdapter() {
		if (exponentialItemProvider == null) {
			exponentialItemProvider = new ExponentialItemProvider(this);
		}

		return exponentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Normal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NormalItemProvider normalItemProvider;

	/**
	 * This creates an adapter for a {@link san.Normal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNormalAdapter() {
		if (normalItemProvider == null) {
			normalItemProvider = new NormalItemProvider(this);
		}

		return normalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Gamma} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GammaItemProvider gammaItemProvider;

	/**
	 * This creates an adapter for a {@link san.Gamma}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGammaAdapter() {
		if (gammaItemProvider == null) {
			gammaItemProvider = new GammaItemProvider(this);
		}

		return gammaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Binomial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinomialItemProvider binomialItemProvider;

	/**
	 * This creates an adapter for a {@link san.Binomial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinomialAdapter() {
		if (binomialItemProvider == null) {
			binomialItemProvider = new BinomialItemProvider(this);
		}

		return binomialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Deterministic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeterministicItemProvider deterministicItemProvider;

	/**
	 * This creates an adapter for a {@link san.Deterministic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeterministicAdapter() {
		if (deterministicItemProvider == null) {
			deterministicItemProvider = new DeterministicItemProvider(this);
		}

		return deterministicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Lognormal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LognormalItemProvider lognormalItemProvider;

	/**
	 * This creates an adapter for a {@link san.Lognormal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLognormalAdapter() {
		if (lognormalItemProvider == null) {
			lognormalItemProvider = new LognormalItemProvider(this);
		}

		return lognormalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Beta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BetaItemProvider betaItemProvider;

	/**
	 * This creates an adapter for a {@link san.Beta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBetaAdapter() {
		if (betaItemProvider == null) {
			betaItemProvider = new BetaItemProvider(this);
		}

		return betaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.NegativeBinomial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegativeBinomialItemProvider negativeBinomialItemProvider;

	/**
	 * This creates an adapter for a {@link san.NegativeBinomial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegativeBinomialAdapter() {
		if (negativeBinomialItemProvider == null) {
			negativeBinomialItemProvider = new NegativeBinomialItemProvider(this);
		}

		return negativeBinomialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Geometric} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeometricItemProvider geometricItemProvider;

	/**
	 * This creates an adapter for a {@link san.Geometric}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeometricAdapter() {
		if (geometricItemProvider == null) {
			geometricItemProvider = new GeometricItemProvider(this);
		}

		return geometricItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Erlang} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErlangItemProvider erlangItemProvider;

	/**
	 * This creates an adapter for a {@link san.Erlang}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErlangAdapter() {
		if (erlangItemProvider == null) {
			erlangItemProvider = new ErlangItemProvider(this);
		}

		return erlangItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Uniform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniformItemProvider uniformItemProvider;

	/**
	 * This creates an adapter for a {@link san.Uniform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniformAdapter() {
		if (uniformItemProvider == null) {
			uniformItemProvider = new UniformItemProvider(this);
		}

		return uniformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.HyperExponential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HyperExponentialItemProvider hyperExponentialItemProvider;

	/**
	 * This creates an adapter for a {@link san.HyperExponential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHyperExponentialAdapter() {
		if (hyperExponentialItemProvider == null) {
			hyperExponentialItemProvider = new HyperExponentialItemProvider(this);
		}

		return hyperExponentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Weibull} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WeibullItemProvider weibullItemProvider;

	/**
	 * This creates an adapter for a {@link san.Weibull}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWeibullAdapter() {
		if (weibullItemProvider == null) {
			weibullItemProvider = new WeibullItemProvider(this);
		}

		return weibullItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Triangular} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriangularItemProvider triangularItemProvider;

	/**
	 * This creates an adapter for a {@link san.Triangular}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriangularAdapter() {
		if (triangularItemProvider == null) {
			triangularItemProvider = new TriangularItemProvider(this);
		}

		return triangularItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.ConditionalWeibull} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalWeibullItemProvider conditionalWeibullItemProvider;

	/**
	 * This creates an adapter for a {@link san.ConditionalWeibull}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalWeibullAdapter() {
		if (conditionalWeibullItemProvider == null) {
			conditionalWeibullItemProvider = new ConditionalWeibullItemProvider(this);
		}

		return conditionalWeibullItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.HypoExponential} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HypoExponentialItemProvider hypoExponentialItemProvider;

	/**
	 * This creates an adapter for a {@link san.HypoExponential}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHypoExponentialAdapter() {
		if (hypoExponentialItemProvider == null) {
			hypoExponentialItemProvider = new HypoExponentialItemProvider(this);
		}

		return hypoExponentialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Pareto} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParetoItemProvider paretoItemProvider;

	/**
	 * This creates an adapter for a {@link san.Pareto}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParetoAdapter() {
		if (paretoItemProvider == null) {
			paretoItemProvider = new ParetoItemProvider(this);
		}

		return paretoItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.PrimitiveType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveTypeItemProvider primitiveTypeItemProvider;

	/**
	 * This creates an adapter for a {@link san.PrimitiveType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveTypeAdapter() {
		if (primitiveTypeItemProvider == null) {
			primitiveTypeItemProvider = new PrimitiveTypeItemProvider(this);
		}

		return primitiveTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.ComplexType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexTypeItemProvider complexTypeItemProvider;

	/**
	 * This creates an adapter for a {@link san.ComplexType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexTypeAdapter() {
		if (complexTypeItemProvider == null) {
			complexTypeItemProvider = new ComplexTypeItemProvider(this);
		}

		return complexTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.CustomTypeArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTypeArrayItemProvider customTypeArrayItemProvider;

	/**
	 * This creates an adapter for a {@link san.CustomTypeArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTypeArrayAdapter() {
		if (customTypeArrayItemProvider == null) {
			customTypeArrayItemProvider = new CustomTypeArrayItemProvider(this);
		}

		return customTypeArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.CustomTypeStruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomTypeStructItemProvider customTypeStructItemProvider;

	/**
	 * This creates an adapter for a {@link san.CustomTypeStruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomTypeStructAdapter() {
		if (customTypeStructItemProvider == null) {
			customTypeStructItemProvider = new CustomTypeStructItemProvider(this);
		}

		return customTypeStructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link san.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.MarkingSimple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkingSimpleItemProvider markingSimpleItemProvider;

	/**
	 * This creates an adapter for a {@link san.MarkingSimple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkingSimpleAdapter() {
		if (markingSimpleItemProvider == null) {
			markingSimpleItemProvider = new MarkingSimpleItemProvider(this);
		}

		return markingSimpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.MarkingGlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkingGlobalVariableItemProvider markingGlobalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link san.MarkingGlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkingGlobalVariableAdapter() {
		if (markingGlobalVariableItemProvider == null) {
			markingGlobalVariableItemProvider = new MarkingGlobalVariableItemProvider(this);
		}

		return markingGlobalVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.MarkingExtended} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MarkingExtendedItemProvider markingExtendedItemProvider;

	/**
	 * This creates an adapter for a {@link san.MarkingExtended}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMarkingExtendedAdapter() {
		if (markingExtendedItemProvider == null) {
			markingExtendedItemProvider = new MarkingExtendedItemProvider(this);
		}

		return markingExtendedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.Array} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayItemProvider arrayItemProvider;

	/**
	 * This creates an adapter for a {@link san.Array}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayAdapter() {
		if (arrayItemProvider == null) {
			arrayItemProvider = new ArrayItemProvider(this);
		}

		return arrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.LeafNodeString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafNodeStringItemProvider leafNodeStringItemProvider;

	/**
	 * This creates an adapter for a {@link san.LeafNodeString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafNodeStringAdapter() {
		if (leafNodeStringItemProvider == null) {
			leafNodeStringItemProvider = new LeafNodeStringItemProvider(this);
		}

		return leafNodeStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.LeafNodeStruct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafNodeStructItemProvider leafNodeStructItemProvider;

	/**
	 * This creates an adapter for a {@link san.LeafNodeStruct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafNodeStructAdapter() {
		if (leafNodeStructItemProvider == null) {
			leafNodeStructItemProvider = new LeafNodeStructItemProvider(this);
		}

		return leafNodeStructItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link san.LeafNodeGlobalVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeafNodeGlobalVariableItemProvider leafNodeGlobalVariableItemProvider;

	/**
	 * This creates an adapter for a {@link san.LeafNodeGlobalVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLeafNodeGlobalVariableAdapter() {
		if (leafNodeGlobalVariableItemProvider == null) {
			leafNodeGlobalVariableItemProvider = new LeafNodeGlobalVariableItemProvider(this);
		}

		return leafNodeGlobalVariableItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (sanItemProvider != null) sanItemProvider.dispose();
		if (placeItemProvider != null) placeItemProvider.dispose();
		if (instantaneousActivityItemProvider != null) instantaneousActivityItemProvider.dispose();
		if (timedActivityItemProvider != null) timedActivityItemProvider.dispose();
		if (caseItemProvider != null) caseItemProvider.dispose();
		if (inputArcItemProvider != null) inputArcItemProvider.dispose();
		if (outputArcItemProvider != null) outputArcItemProvider.dispose();
		if (outputGateItemProvider != null) outputGateItemProvider.dispose();
		if (inputGateItemProvider != null) inputGateItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (expressionTextItemProvider != null) expressionTextItemProvider.dispose();
		if (expressionMarkingItemProvider != null) expressionMarkingItemProvider.dispose();
		if (expressionVariableItemProvider != null) expressionVariableItemProvider.dispose();
		if (globalVariableItemProvider != null) globalVariableItemProvider.dispose();
		if (exponentialItemProvider != null) exponentialItemProvider.dispose();
		if (normalItemProvider != null) normalItemProvider.dispose();
		if (gammaItemProvider != null) gammaItemProvider.dispose();
		if (binomialItemProvider != null) binomialItemProvider.dispose();
		if (deterministicItemProvider != null) deterministicItemProvider.dispose();
		if (lognormalItemProvider != null) lognormalItemProvider.dispose();
		if (betaItemProvider != null) betaItemProvider.dispose();
		if (negativeBinomialItemProvider != null) negativeBinomialItemProvider.dispose();
		if (geometricItemProvider != null) geometricItemProvider.dispose();
		if (erlangItemProvider != null) erlangItemProvider.dispose();
		if (uniformItemProvider != null) uniformItemProvider.dispose();
		if (hyperExponentialItemProvider != null) hyperExponentialItemProvider.dispose();
		if (weibullItemProvider != null) weibullItemProvider.dispose();
		if (triangularItemProvider != null) triangularItemProvider.dispose();
		if (conditionalWeibullItemProvider != null) conditionalWeibullItemProvider.dispose();
		if (hypoExponentialItemProvider != null) hypoExponentialItemProvider.dispose();
		if (paretoItemProvider != null) paretoItemProvider.dispose();
		if (primitiveTypeItemProvider != null) primitiveTypeItemProvider.dispose();
		if (complexTypeItemProvider != null) complexTypeItemProvider.dispose();
		if (customTypeArrayItemProvider != null) customTypeArrayItemProvider.dispose();
		if (customTypeStructItemProvider != null) customTypeStructItemProvider.dispose();
		if (fieldItemProvider != null) fieldItemProvider.dispose();
		if (markingSimpleItemProvider != null) markingSimpleItemProvider.dispose();
		if (markingGlobalVariableItemProvider != null) markingGlobalVariableItemProvider.dispose();
		if (markingExtendedItemProvider != null) markingExtendedItemProvider.dispose();
		if (arrayItemProvider != null) arrayItemProvider.dispose();
		if (leafNodeStringItemProvider != null) leafNodeStringItemProvider.dispose();
		if (leafNodeStructItemProvider != null) leafNodeStructItemProvider.dispose();
		if (leafNodeGlobalVariableItemProvider != null) leafNodeGlobalVariableItemProvider.dispose();
	}

}
