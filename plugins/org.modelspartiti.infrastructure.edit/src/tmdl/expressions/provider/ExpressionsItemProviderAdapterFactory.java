/**
 */
package tmdl.expressions.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import tmdl.expressions.util.ExpressionsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ExpressionsItemProviderAdapterFactory extends ExpressionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ExpressionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionIntegerLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionIntegerLiteralItemProvider templateExpressionIntegerLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionIntegerLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionIntegerLiteralAdapter() {
		if (templateExpressionIntegerLiteralItemProvider == null) {
			templateExpressionIntegerLiteralItemProvider = new TemplateExpressionIntegerLiteralItemProvider(this);
		}

		return templateExpressionIntegerLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealLiteralItemProvider templateExpressionRealLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealLiteralAdapter() {
		if (templateExpressionRealLiteralItemProvider == null) {
			templateExpressionRealLiteralItemProvider = new TemplateExpressionRealLiteralItemProvider(this);
		}

		return templateExpressionRealLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionBoolaenLiteral} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionBoolaenLiteralItemProvider templateExpressionBoolaenLiteralItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionBoolaenLiteral}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionBoolaenLiteralAdapter() {
		if (templateExpressionBoolaenLiteralItemProvider == null) {
			templateExpressionBoolaenLiteralItemProvider = new TemplateExpressionBoolaenLiteralItemProvider(this);
		}

		return templateExpressionBoolaenLiteralItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionIntegerFromReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionIntegerFromRealItemProvider templateExpressionIntegerFromRealItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionIntegerFromReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionIntegerFromRealAdapter() {
		if (templateExpressionIntegerFromRealItemProvider == null) {
			templateExpressionIntegerFromRealItemProvider = new TemplateExpressionIntegerFromRealItemProvider(this);
		}

		return templateExpressionIntegerFromRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealFromInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealFromIntegerItemProvider templateExpressionRealFromIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealFromInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealFromIntegerAdapter() {
		if (templateExpressionRealFromIntegerItemProvider == null) {
			templateExpressionRealFromIntegerItemProvider = new TemplateExpressionRealFromIntegerItemProvider(this);
		}

		return templateExpressionRealFromIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionParameterSimple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionParameterSimpleItemProvider templateExpressionParameterSimpleItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionParameterSimple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionParameterSimpleAdapter() {
		if (templateExpressionParameterSimpleItemProvider == null) {
			templateExpressionParameterSimpleItemProvider = new TemplateExpressionParameterSimpleItemProvider(this);
		}

		return templateExpressionParameterSimpleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionParameterArrayValueAt} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionParameterArrayValueAtItemProvider templateExpressionParameterArrayValueAtItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionParameterArrayValueAt}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionParameterArrayValueAtAdapter() {
		if (templateExpressionParameterArrayValueAtItemProvider == null) {
			templateExpressionParameterArrayValueAtItemProvider = new TemplateExpressionParameterArrayValueAtItemProvider(this);
		}

		return templateExpressionParameterArrayValueAtItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionParameterArraySize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionParameterArraySizeItemProvider templateExpressionParameterArraySizeItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionParameterArraySize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionParameterArraySizeAdapter() {
		if (templateExpressionParameterArraySizeItemProvider == null) {
			templateExpressionParameterArraySizeItemProvider = new TemplateExpressionParameterArraySizeItemProvider(this);
		}

		return templateExpressionParameterArraySizeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionArrayAggregate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionArrayAggregateItemProvider templateExpressionArrayAggregateItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionArrayAggregate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionArrayAggregateAdapter() {
		if (templateExpressionArrayAggregateItemProvider == null) {
			templateExpressionArrayAggregateItemProvider = new TemplateExpressionArrayAggregateItemProvider(this);
		}

		return templateExpressionArrayAggregateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealSum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealSumItemProvider templateExpressionRealSumItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealSum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealSumAdapter() {
		if (templateExpressionRealSumItemProvider == null) {
			templateExpressionRealSumItemProvider = new TemplateExpressionRealSumItemProvider(this);
		}

		return templateExpressionRealSumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealSubtract} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealSubtractItemProvider templateExpressionRealSubtractItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealSubtract}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealSubtractAdapter() {
		if (templateExpressionRealSubtractItemProvider == null) {
			templateExpressionRealSubtractItemProvider = new TemplateExpressionRealSubtractItemProvider(this);
		}

		return templateExpressionRealSubtractItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealMultiply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealMultiplyItemProvider templateExpressionRealMultiplyItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealMultiply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealMultiplyAdapter() {
		if (templateExpressionRealMultiplyItemProvider == null) {
			templateExpressionRealMultiplyItemProvider = new TemplateExpressionRealMultiplyItemProvider(this);
		}

		return templateExpressionRealMultiplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealDivide} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealDivideItemProvider templateExpressionRealDivideItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealDivide}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealDivideAdapter() {
		if (templateExpressionRealDivideItemProvider == null) {
			templateExpressionRealDivideItemProvider = new TemplateExpressionRealDivideItemProvider(this);
		}

		return templateExpressionRealDivideItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealModulo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealModuloItemProvider templateExpressionRealModuloItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealModulo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealModuloAdapter() {
		if (templateExpressionRealModuloItemProvider == null) {
			templateExpressionRealModuloItemProvider = new TemplateExpressionRealModuloItemProvider(this);
		}

		return templateExpressionRealModuloItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealFloor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealFloorItemProvider templateExpressionRealFloorItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealFloor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealFloorAdapter() {
		if (templateExpressionRealFloorItemProvider == null) {
			templateExpressionRealFloorItemProvider = new TemplateExpressionRealFloorItemProvider(this);
		}

		return templateExpressionRealFloorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealCeil} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealCeilItemProvider templateExpressionRealCeilItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealCeil}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealCeilAdapter() {
		if (templateExpressionRealCeilItemProvider == null) {
			templateExpressionRealCeilItemProvider = new TemplateExpressionRealCeilItemProvider(this);
		}

		return templateExpressionRealCeilItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealRound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealRoundItemProvider templateExpressionRealRoundItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealRound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealRoundAdapter() {
		if (templateExpressionRealRoundItemProvider == null) {
			templateExpressionRealRoundItemProvider = new TemplateExpressionRealRoundItemProvider(this);
		}

		return templateExpressionRealRoundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionRealIfThenElse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionRealIfThenElseItemProvider templateExpressionRealIfThenElseItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionRealIfThenElse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionRealIfThenElseAdapter() {
		if (templateExpressionRealIfThenElseItemProvider == null) {
			templateExpressionRealIfThenElseItemProvider = new TemplateExpressionRealIfThenElseItemProvider(this);
		}

		return templateExpressionRealIfThenElseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionBooleanNot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionBooleanNotItemProvider templateExpressionBooleanNotItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionBooleanNot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionBooleanNotAdapter() {
		if (templateExpressionBooleanNotItemProvider == null) {
			templateExpressionBooleanNotItemProvider = new TemplateExpressionBooleanNotItemProvider(this);
		}

		return templateExpressionBooleanNotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionBooleanToInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionBooleanToIntegerItemProvider templateExpressionBooleanToIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionBooleanToInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionBooleanToIntegerAdapter() {
		if (templateExpressionBooleanToIntegerItemProvider == null) {
			templateExpressionBooleanToIntegerItemProvider = new TemplateExpressionBooleanToIntegerItemProvider(this);
		}

		return templateExpressionBooleanToIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionBooleanAnd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionBooleanAndItemProvider templateExpressionBooleanAndItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionBooleanAnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionBooleanAndAdapter() {
		if (templateExpressionBooleanAndItemProvider == null) {
			templateExpressionBooleanAndItemProvider = new TemplateExpressionBooleanAndItemProvider(this);
		}

		return templateExpressionBooleanAndItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link tmdl.expressions.TemplateExpressionBooleanOr} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TemplateExpressionBooleanOrItemProvider templateExpressionBooleanOrItemProvider;

	/**
	 * This creates an adapter for a {@link tmdl.expressions.TemplateExpressionBooleanOr}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTemplateExpressionBooleanOrAdapter() {
		if (templateExpressionBooleanOrItemProvider == null) {
			templateExpressionBooleanOrItemProvider = new TemplateExpressionBooleanOrItemProvider(this);
		}

		return templateExpressionBooleanOrItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (templateExpressionIntegerLiteralItemProvider != null) templateExpressionIntegerLiteralItemProvider.dispose();
		if (templateExpressionRealLiteralItemProvider != null) templateExpressionRealLiteralItemProvider.dispose();
		if (templateExpressionBoolaenLiteralItemProvider != null) templateExpressionBoolaenLiteralItemProvider.dispose();
		if (templateExpressionIntegerFromRealItemProvider != null) templateExpressionIntegerFromRealItemProvider.dispose();
		if (templateExpressionRealFromIntegerItemProvider != null) templateExpressionRealFromIntegerItemProvider.dispose();
		if (templateExpressionParameterSimpleItemProvider != null) templateExpressionParameterSimpleItemProvider.dispose();
		if (templateExpressionParameterArrayValueAtItemProvider != null) templateExpressionParameterArrayValueAtItemProvider.dispose();
		if (templateExpressionParameterArraySizeItemProvider != null) templateExpressionParameterArraySizeItemProvider.dispose();
		if (templateExpressionArrayAggregateItemProvider != null) templateExpressionArrayAggregateItemProvider.dispose();
		if (templateExpressionRealSumItemProvider != null) templateExpressionRealSumItemProvider.dispose();
		if (templateExpressionRealSubtractItemProvider != null) templateExpressionRealSubtractItemProvider.dispose();
		if (templateExpressionRealMultiplyItemProvider != null) templateExpressionRealMultiplyItemProvider.dispose();
		if (templateExpressionRealDivideItemProvider != null) templateExpressionRealDivideItemProvider.dispose();
		if (templateExpressionRealModuloItemProvider != null) templateExpressionRealModuloItemProvider.dispose();
		if (templateExpressionRealFloorItemProvider != null) templateExpressionRealFloorItemProvider.dispose();
		if (templateExpressionRealCeilItemProvider != null) templateExpressionRealCeilItemProvider.dispose();
		if (templateExpressionRealRoundItemProvider != null) templateExpressionRealRoundItemProvider.dispose();
		if (templateExpressionRealIfThenElseItemProvider != null) templateExpressionRealIfThenElseItemProvider.dispose();
		if (templateExpressionBooleanNotItemProvider != null) templateExpressionBooleanNotItemProvider.dispose();
		if (templateExpressionBooleanToIntegerItemProvider != null) templateExpressionBooleanToIntegerItemProvider.dispose();
		if (templateExpressionBooleanAndItemProvider != null) templateExpressionBooleanAndItemProvider.dispose();
		if (templateExpressionBooleanOrItemProvider != null) templateExpressionBooleanOrItemProvider.dispose();
	}

}
